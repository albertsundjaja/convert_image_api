{"version":3,"sources":["containers/MainContainer.js","App.js","serviceWorker.js","index.js"],"names":["MainContainer","state","file","errorMsg","convertedFilename","convertedFile","handleImageChosen","e","target","files","_this","setState","convertImage","self","Object","assertThisInitialized","formData","FormData","append","axios","post","header","Content-Type","then","resp","console","log","data","filename","catch","err","response","error","react_default","a","createElement","this","img","url","src","Container","Row","Col","xs","md","type","onChange","onClick","style","color","Component","App","className","containers_MainContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8RAsGeA,6MA9FXC,MAAQ,CACJC,KAAO,GACPC,SAAW,GACXC,kBAAoB,GACpBC,cAAgB,MAGpBC,kBAAoB,SAACC,GACjB,IAAML,EAAOK,EAAEC,OAAOC,MAAM,GAC5BC,EAAKC,SAAS,CACVT,KAAOA,OAIfU,aAAe,WACX,IAAIC,EAAIC,OAAAC,EAAA,EAAAD,CAAAJ,GAEFR,EAAOQ,EAAKT,MAAMC,KACpBc,EAAW,IAAIC,SACnBD,EAASE,OAAO,OAAQhB,GAMxBiB,IAAMC,KAAK,oCAAqCJ,EALnC,CACTK,OAAQ,CACJC,eAAgB,yBAIvBC,KAAK,SAACC,GACHC,QAAQC,IAAIF,GACZX,EAAKF,SAAS,CACVR,SAAU,GACVC,kBAAmBoB,EAAKG,KAAKC,aAGpCC,MAAM,SAACC,GACJL,QAAQC,IAAII,EAAIC,UAChBlB,EAAKF,SAAS,CACVR,SAAU2B,EAAIC,SAASJ,KAAKK,mFAMpC,IAIIF,EAAOG,EAAAC,EAAAC,cAAA,YACiB,KAAxBC,KAAKnC,MAAME,WACX2B,EACIG,EAAAC,EAAAC,cAAA,WACKC,KAAKnC,MAAME,WAKxB,IAAIkC,EAAOJ,EAAAC,EAAAC,cAAA,YACX,GAAoC,KAAhCC,KAAKnC,MAAMG,kBAAyB,CACpC,IAAIkC,EAAM,uCAAyCF,KAAKnC,MAAMG,kBAC9DiC,EACIJ,EAAAC,EAAAC,cAAA,OAAKI,IAAKD,IAGlB,OACIL,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACIP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAKC,GAAG,MACJV,EAAAC,EAAAC,cAAA,0CAGRF,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,KACZX,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,2EACAF,EAAAC,EAAAC,cAAA,SAAOU,KAAK,OAAOC,SAAUV,KAAK9B,oBAClC2B,EAAAC,EAAAC,cAAA,UAAQY,QAASX,KAAKxB,cAAtB,aAGRqB,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,KACZX,EAAAC,EAAAC,cAAA,QAAMa,MAtCT,CACbC,MAAM,QAqCkCnB,KAGhCG,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAKC,GAAG,MACHN,aAvFDa,aCKbC,MARf,WACE,OACElB,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,OACbnB,EAAAC,EAAAC,cAACkB,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,KAAK,SAAA4C,GACjCA,EAAaC","file":"static/js/main.fa85d6be.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport {Container, Row, Col} from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\n\r\nclass MainContainer extends Component {\r\n\r\n    state = {\r\n        'file':'',\r\n        'errorMsg':'',\r\n        'convertedFilename':'',\r\n        'convertedFile':''\r\n    }\r\n\r\n    handleImageChosen = (e) => {\r\n        const file = e.target.files[0];\r\n        this.setState({\r\n            'file':file\r\n        })\r\n    }\r\n\r\n    convertImage = () => {\r\n        let self = this;\r\n\r\n        const file = this.state.file;\r\n        let formData = new FormData();\r\n        formData.append('file', file);\r\n        let config = {\r\n            header: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }\r\n        axios.post('http://localhost:5000/upload_file', formData, config)\r\n        .then((resp) => {\r\n            console.log(resp);\r\n            self.setState({\r\n                errorMsg: '',\r\n                convertedFilename: resp.data.filename\r\n            })\r\n        })\r\n        .catch((err) => {\r\n            console.log(err.response);\r\n            self.setState({\r\n                errorMsg: err.response.data.error\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const redStyle = {\r\n            color:\"red\"\r\n        }\r\n\r\n        let err = (<div></div>);\r\n        if (this.state.errorMsg !== '') {\r\n            err = (\r\n                <div>\r\n                    {this.state.errorMsg}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        let img = (<div></div>);\r\n        if (this.state.convertedFilename!== '') {\r\n            let url = 'http://localhost:5000/download_file/' + this.state.convertedFilename;\r\n            img = (\r\n                <img src={url}></img>\r\n            )\r\n        }\r\n        return (\r\n            <div>\r\n                <Container>\r\n                    <Row>\r\n                        <Col xs=\"12\">\r\n                            <h1>RGB to Grayscale Converter</h1>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs=\"12\" md=\"6\">\r\n                            <h2>Choose Image</h2>\r\n                            <label>Please only upload image with .png .jpg or .jpeg extension</label>\r\n                            <input type=\"file\" onChange={this.handleImageChosen} />\r\n                            <button onClick={this.convertImage}>Convert</button>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs=\"12\" md=\"6\">\r\n                            <span style={redStyle}>{err}</span>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs=\"12\">\r\n                            {img}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MainContainer;","import React from 'react';\nimport MainContainer from './containers/MainContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}